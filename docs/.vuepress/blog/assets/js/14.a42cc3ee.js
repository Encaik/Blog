(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{516:function(s,a,e){"use strict";e.r(a);var t=e(20),r=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"docker-compose使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose使用"}},[s._v("#")]),s._v(" Docker-compose使用")]),s._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),e("h3",{attrs:{id:"pip安装（推荐）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pip安装（推荐）"}},[s._v("#")]),s._v(" pip安装（推荐）")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" pip "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -U docker-compose\n")])])]),e("p",[s._v("然后通过bash补全命令。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L https://raw.githubusercontent.com/docker/compose/1.2.0/contrib/completion/bash/docker-compose "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /etc/bash_completion.d/docker-compose\n")])])]),e("h3",{attrs:{id:"二进制安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制安装"}},[s._v("#")]),s._v(" 二进制安装")]),s._v(" "),e("p",[s._v("二进制安装包可以直接在github上找到，下载后解压到执行目录即可。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L https://raw.githubusercontent.com/docker/compose/1.2.0/contrib/completion/bash/docker-compose "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /etc/bash_completion.d/docker-compose\n")])])]),e("h2",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),e("p",[s._v("服务（service）：一个应用容器，实际上可以运行多个相同镜像的实例。")]),s._v(" "),e("p",[s._v("项目(project)：由一组关联的应用容器组成的一个完整业务单元。")]),s._v(" "),e("p",[s._v("可见，一个项目可以由多个服务（容器）关联而成，Compose 面向项目进行管理。")]),s._v(" "),e("h2",{attrs:{id:"docker-compose-yml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml"}},[s._v("#")]),s._v(" docker-compose.yml")]),s._v(" "),e("p",[s._v("默认的模板文件是 docker-compose.yml，其中定义的每个服务都必须通过 image 指令指定镜像或 build 指令（需要 Dockerfile）来自动构建。")]),s._v(" "),e("p",[s._v("其它大部分指令都跟 docker run 中的类似。")]),s._v(" "),e("p",[s._v("如果使用 build 指令，在 Dockerfile 中设置的选项(例如：CMD, EXPOSE, VOLUME, ENV 等) 将会自动被获取，无需在 docker-compose.yml 中再次设置。")]),s._v(" "),e("h3",{attrs:{id:"image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#image"}},[s._v("#")]),s._v(" image")]),s._v(" "),e("p",[s._v("指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉去这个镜像。")]),s._v(" "),e("p",[s._v("例如：")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("image: ubuntu\nimage: orchardup/postgresql\nimage: a4bc65fd\n")])])]),e("h3",{attrs:{id:"build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[s._v("#")]),s._v(" build")]),s._v(" "),e("p",[s._v("指定 Dockerfile 所在文件夹的路径。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("build: /path/to/build/dir\n")])])]),e("h3",{attrs:{id:"command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#command"}},[s._v("#")]),s._v(" command")]),s._v(" "),e("p",[s._v("覆盖容器启动后默认执行的命令。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("command: bundle "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" thin -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v("\n")])])]),e("h3",{attrs:{id:"links"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[s._v("#")]),s._v(" links")]),s._v(" "),e("p",[s._v("链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名 （SERVICE:ALIAS） 格式都可以。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("links:\n - db\n - db:database\n - redis\n")])])]),e("p",[s._v("使用的别名将会自动在服务容器中的 /etc/hosts 里创建。例如：")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".2.186  db\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".2.186  database\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".2.187  redis\n")])])]),e("p",[s._v("相应的环境变量也将被创建。")]),s._v(" "),e("h3",{attrs:{id:"external-links"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#external-links"}},[s._v("#")]),s._v(" external_links")]),s._v(" "),e("p",[s._v("链接到 docker-compose.yml 外部的容器，甚至 并非 Compose 管理的容器。参数格式跟 links 类似。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("external_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql\n")])])]),e("h3",{attrs:{id:"ports"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ports"}},[s._v("#")]),s._v(" ports")]),s._v(" "),e("p",[s._v("暴露端口信息。")]),s._v(" "),e("p",[s._v("使用宿主：容器 （HOST:CONTAINER）格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("ports:\n - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3000"')]),s._v("\n - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8000:8000"')]),s._v("\n - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"49100:22"')]),s._v("\n - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"127.0.0.1:8001:8001"')]),s._v("\n")])])]),e("p",[s._v("注：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 YAML 将会解析 xx:yy 这种数字格式为 60 进制。所以建议采用字符串格式。")]),s._v(" "),e("h3",{attrs:{id:"expose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[s._v("#")]),s._v(" expose")]),s._v(" "),e("p",[s._v("暴露端口，但不映射到宿主机，只被连接的服务访问。")]),s._v(" "),e("p",[s._v("仅可以指定内部端口为参数")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("expose:\n - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3000"')]),s._v("\n - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8000"')]),s._v("\n")])])]),e("h3",{attrs:{id:"volumes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volumes"}},[s._v("#")]),s._v(" volumes")]),s._v(" "),e("p",[s._v("卷挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("volumes:\n - /var/lib/mysql\n - cache/:/tmp/cache\n - ~/configs:/etc/configs/:ro\n")])])]),e("h3",{attrs:{id:"volumes-from"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volumes-from"}},[s._v("#")]),s._v(" volumes_from")]),s._v(" "),e("p",[s._v("从另一个服务或容器挂载它的所有卷。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("volumes_from:\n - service_name\n - container_name\n")])])]),e("h3",{attrs:{id:"environment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#environment"}},[s._v("#")]),s._v(" environment")]),s._v(" "),e("p",[s._v("设置环境变量。你可以使用数组或字典两种格式。")]),s._v(" "),e("p",[s._v("只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("environment:\n  RACK_ENV: development\n  SESSION_SECRET:\n\nenvironment:\n  - "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("RACK_ENV")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("development\n  - SESSION_SECRET\n")])])]),e("h3",{attrs:{id:"env-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env-file"}},[s._v("#")]),s._v(" env_file")]),s._v(" "),e("p",[s._v("从文件中获取环境变量，可以为单独的文件路径或列表。")]),s._v(" "),e("p",[s._v("如果通过 docker-compose -f FILE 指定了模板文件，则 env_file 中路径会基于模板文件路径。")]),s._v(" "),e("p",[s._v("如果有变量名称与 environment 指令冲突，则以后者为准。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("env_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n")])])]),e("p",[s._v("环境变量文件中每一行必须符合格式，支持 # 开头的注释行。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# common.env: Set Rails/Rack environment")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("RACK_ENV")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("development\n")])])]),e("h3",{attrs:{id:"extends"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extends"}},[s._v("#")]),s._v(" extends")]),s._v(" "),e("p",[s._v("基于已有的服务进行扩展。例如我们已经有了一个 webapp 服务，模板文件为 common.yml。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# common.yml")]),s._v("\nwebapp:\n  build: ./webapp\n  environment:\n    - "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DEBUG")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("false\n    - "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("SEND_EMAILS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("false\n")])])]),e("p",[s._v("编写一个新的 development.yml 文件，使用 common.yml 中的 webapp 服务进行扩展。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# development.yml")]),s._v("\nweb:\n  extends:\n    file: common.yml\n    service: webapp\n  ports:\n    - "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8000:8000"')]),s._v("\n  links:\n    - db\n  environment:\n    - "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DEBUG")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true\ndb:\n  image: postgres\n")])])]),e("p",[s._v("后者会自动继承 common.yml 中的 webapp 服务及相关环节变量。")]),s._v(" "),e("h3",{attrs:{id:"net"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#net"}},[s._v("#")]),s._v(" net")]),s._v(" "),e("p",[s._v("设置网络模式。使用和 docker client 的 --net 参数一样的值。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("net: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bridge"')]),s._v("\nnet: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"none"')]),s._v("\nnet: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"container:[name or id]"')]),s._v("\nnet: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"host"')]),s._v("\n")])])]),e("h3",{attrs:{id:"pid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pid"}},[s._v("#")]),s._v(" pid")]),s._v(" "),e("p",[s._v("跟主机系统共享进程命名空间。打开该选项的容器可以相互通过进程 ID 来访问和操作。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("pid: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"host"')]),s._v("\n")])])]),e("h3",{attrs:{id:"dns"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[s._v("#")]),s._v(" dns")]),s._v(" "),e("p",[s._v("配置 DNS 服务器。可以是一个值，也可以是一个列表。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("dns: "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8\ndns:\n  - "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.8")]),s._v(".8.8\n  - "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.9")]),s._v(".9.9\n")])])]),e("h3",{attrs:{id:"cap-add-cap-drop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cap-add-cap-drop"}},[s._v("#")]),s._v(" cap_add, cap_drop")]),s._v(" "),e("p",[s._v("添加或放弃容器的 Linux 能力（Capabiliity）。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("cap_add:\n  - ALL\n\ncap_drop:\n  - NET_ADMIN\n  - SYS_ADMIN\n")])])]),e("h3",{attrs:{id:"dns-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dns-search"}},[s._v("#")]),s._v(" dns_search")]),s._v(" "),e("p",[s._v("配置 DNS 搜索域。可以是一个值，也可以是一个列表。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("dns_search: example.com\ndns_search:\n  - domain1.example.com\n  - domain2.example.com\n")])])]),e("h3",{attrs:{id:"working-dir-entrypoint-user-hostname-domainname-mem-limit-privileged-restart-stdin-open-tty-cpu-shares"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#working-dir-entrypoint-user-hostname-domainname-mem-limit-privileged-restart-stdin-open-tty-cpu-shares"}},[s._v("#")]),s._v(" working_dir, entrypoint, user, hostname, domainname, mem_limit, privileged, restart, stdin_open, tty, cpu_shares")]),s._v(" "),e("p",[s._v("这些都是和 docker run 支持的选项类似。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("cpu_shares: "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("73")]),s._v("\n\nworking_dir: /code\nentrypoint: /code/entrypoint.sh\nuser: postgresql\n\nhostname: foo\ndomainname: foo.com\n\nmem_limit: "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000000")]),s._v("\nprivileged: "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n\nrestart: always\n\nstdin_open: "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\ntty: "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])])]),e("h2",{attrs:{id:"docker-compose命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose命令"}},[s._v("#")]),s._v(" docker-compose命令")]),s._v(" "),e("h3",{attrs:{id:"build-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-2"}},[s._v("#")]),s._v(" build")]),s._v(" "),e("p",[s._v("构建或重新构建服务。")]),s._v(" "),e("p",[s._v("服务一旦构建后，将会带上一个标记名，例如 web_db。")]),s._v(" "),e("p",[s._v("可以随时在项目目录下运行 docker-compose build 来重新构建服务。")]),s._v(" "),e("h3",{attrs:{id:"help"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#help"}},[s._v("#")]),s._v(" help")]),s._v(" "),e("p",[s._v("获得一个命令的帮助。")]),s._v(" "),e("h3",{attrs:{id:"kill"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kill"}},[s._v("#")]),s._v(" kill")]),s._v(" "),e("p",[s._v("通过发送 SIGKILL 信号来强制停止服务容器。支持通过参数来指定发送的信号，例如")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker-compose "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" -s SIGINT\n")])])]),e("h3",{attrs:{id:"logs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logs"}},[s._v("#")]),s._v(" logs")]),s._v(" "),e("p",[s._v("查看服务的输出。")]),s._v(" "),e("h3",{attrs:{id:"port"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#port"}},[s._v("#")]),s._v(" port")]),s._v(" "),e("p",[s._v("打印绑定的公共端口。")]),s._v(" "),e("h3",{attrs:{id:"ps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ps"}},[s._v("#")]),s._v(" ps")]),s._v(" "),e("p",[s._v("列出所有容器。")]),s._v(" "),e("h3",{attrs:{id:"pull"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[s._v("#")]),s._v(" pull")]),s._v(" "),e("p",[s._v("拉取服务镜像。")]),s._v(" "),e("h3",{attrs:{id:"rm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[s._v("#")]),s._v(" rm")]),s._v(" "),e("p",[s._v("删除停止的服务容器。")]),s._v(" "),e("h3",{attrs:{id:"run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[s._v("#")]),s._v(" run")]),s._v(" "),e("p",[s._v("在一个服务上执行一个命令。")]),s._v(" "),e("p",[s._v("例如：")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker-compose run ubuntu "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" docker.com\n")])])]),e("p",[s._v("将会启动一个 ubuntu 服务，执行 ping docker.com 命令。")]),s._v(" "),e("p",[s._v("默认情况下，所有关联的服务将会自动被启动，除非这些服务已经在运行中。")]),s._v(" "),e("p",[s._v("该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照期望创建。")]),s._v(" "),e("p",[s._v("两个不同点：")]),s._v(" "),e("p",[s._v("给定命令将会覆盖原有的自动运行命令；\n不会自动创建端口，以避免冲突。\n如果不希望自动启动关联的容器，可以使用 --no-deps 选项，例如")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker-compose run --no-deps web python manage.py shell\n")])])]),e("p",[s._v("将不会启动 web 容器所关联的其它容器。")]),s._v(" "),e("h3",{attrs:{id:"scale"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scale"}},[s._v("#")]),s._v(" scale")]),s._v(" "),e("p",[s._v("设置同一个服务运行的容器个数。")]),s._v(" "),e("p",[s._v("通过 service=num 的参数来设置数量。例如：")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker-compose scale "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("web")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("worker")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])])]),e("h3",{attrs:{id:"start"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start"}},[s._v("#")]),s._v(" start")]),s._v(" "),e("p",[s._v("启动一个已经存在的服务容器。")]),s._v(" "),e("h3",{attrs:{id:"stop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stop"}},[s._v("#")]),s._v(" stop")]),s._v(" "),e("p",[s._v("停止一个已经运行的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器。")]),s._v(" "),e("h3",{attrs:{id:"up"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#up"}},[s._v("#")]),s._v(" up")]),s._v(" "),e("p",[s._v("构建，（重新）创建，启动，链接一个服务相关的容器。")]),s._v(" "),e("p",[s._v("链接的服务都将会启动，除非他们已经运行。")]),s._v(" "),e("p",[s._v("默认情况， docker-compose up 将会整合所有容器的输出，并且退出时，所有容器将会停止。")]),s._v(" "),e("p",[s._v("如果使用 docker-compose up -d ，将会在后台启动并运行所有的容器。")]),s._v(" "),e("p",[s._v("默认情况，如果该服务的容器已经存在， docker-compose up 将会停止并尝试重新创建他们（保持使用volumes-from 挂载的卷），以保证 docker-compose.yml 的修改生效。如果你不想容器被停止并重新创建，可以使用 docker-compose up --no-recreate。如果需要的话，这样将会启动已经停止的容器。")]),s._v(" "),e("h2",{attrs:{id:"环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[s._v("#")]),s._v(" 环境变量")]),s._v(" "),e("p",[s._v("环境变量可以用来配置 Compose 的行为。")]),s._v(" "),e("p",[s._v("以DOCKER_开头的变量和用来配置 Docker 命令行客户端的使用一样。如果使用 boot2docker , $(boot2docker shellinit) 将会设置它们为正确的值。")]),s._v(" "),e("h3",{attrs:{id:"compose-project-name"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compose-project-name"}},[s._v("#")]),s._v(" COMPOSE_PROJECT_NAME")]),s._v(" "),e("p",[s._v("设置通过 Compose 启动的每一个容器前添加的项目名称，默认是当前工作目录的名字。")]),s._v(" "),e("h3",{attrs:{id:"compose-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compose-file"}},[s._v("#")]),s._v(" COMPOSE_FILE")]),s._v(" "),e("p",[s._v("设置要使用的 docker-compose.yml 的路径。默认路径是当前工作目录。")]),s._v(" "),e("h3",{attrs:{id:"docker-host"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-host"}},[s._v("#")]),s._v(" DOCKER_HOST")]),s._v(" "),e("p",[s._v("设置 Docker daemon 的地址。默认使用 unix:///var/run/docker.sock，与 Docker 客户端采用的默认值一致。")]),s._v(" "),e("h3",{attrs:{id:"docker-tls-verify"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-tls-verify"}},[s._v("#")]),s._v(" DOCKER_TLS_VERIFY")]),s._v(" "),e("p",[s._v("如果设置不为空，则与 Docker daemon 交互通过 TLS 进行。")]),s._v(" "),e("h3",{attrs:{id:"docker-cert-path"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-cert-path"}},[s._v("#")]),s._v(" DOCKER_CERT_PATH")]),s._v(" "),e("p",[s._v("配置 TLS 通信所需要的验证（ca.pem、cert.pem 和 key.pem）文件的路径，默认是 ~/.docker 。")])])}),[],!1,null,null,null);a.default=r.exports}}]);