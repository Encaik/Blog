(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{529:function(a,s,t){"use strict";t.r(s);var e=t(30),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"docker-使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-使用"}},[a._v("#")]),a._v(" Docker 使用")]),a._v(" "),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),t("h3",{attrs:{id:"ubuntu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu"}},[a._v("#")]),a._v(" Ubuntu")]),a._v(" "),t("h4",{attrs:{id:"卸载旧版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#卸载旧版本"}},[a._v("#")]),a._v(" 卸载旧版本")]),a._v(" "),t("p",[a._v("docker的旧版本被称为docker,docker.io 或docker-engine。如果已安装,请卸载它们:")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" remove docker docker-engine docker.io containerd runc\n")])])]),t("h4",{attrs:{id:"从存储库安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从存储库安装"}},[a._v("#")]),a._v(" 从存储库安装")]),a._v(" "),t("h5",{attrs:{id:"设置存储库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置存储库"}},[a._v("#")]),a._v(" 设置存储库")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("更新apt包索引:")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" update\n")])])])]),a._v(" "),t("li",[t("p",[a._v("安装软件包以允许apt通过HTTPS使用存储库:")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" apt-transport-https ca-certificates "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" gnupg-agent software-properties-common\n")])])])]),a._v(" "),t("li",[t("p",[a._v("添加Docker的官方GPG密钥:")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" -fsSL https://download.docker.com/linux/ubuntu/gpg "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" apt-key "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" -\n")])])]),t("p",[t("code",[a._v("9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88")]),a._v("通过搜索指纹的后8个字符,验证您现在是否拥有带有指纹的密钥 。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" apt-key fingerprint 0EBFCD88\n\npub   rsa4096 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2017")]),a._v("-02-22 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("SCEA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n      9DC8 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5822")]),a._v(" 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid           "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" unknown"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" Docker Release "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CE deb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("docker@docker.com"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\nsub   rsa4096 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2017")]),a._v("-02-22 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])])]),a._v(" "),t("li",[t("p",[a._v("使用以下命令来设置稳定的存储库。要添加 每晚或测试存储库,请在以下命令中的单词后面添加nightly或test（或同时添加）stable。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("下面的lsb_release -cs子命令返回Ubuntu发行版的名称,例如xenial。有时,在Linux Mint等发行版中,您可能需要更改$(lsb_release -cs) 为父Ubuntu发行版。例如,如果您使用 Linux Mint Tessa,则可以使用bionic。Docker对未经测试和不受支持的Ubuntu发行版不提供任何保证。")])]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" add-apt-repository "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"deb [arch=amd64] https://download.docker.com/linux/ubuntu '),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("lsb_release -cs"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(' stable"')]),a._v("\n")])])])])]),a._v(" "),t("h5",{attrs:{id:"安装docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装docker"}},[a._v("#")]),a._v(" 安装Docker")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("更新apt包索引。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" update\n")])])])]),a._v(" "),t("li",[t("p",[a._v("安装最新版本的Docker Engine-Community和containerd,或者转到下一步安装特定版本:")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" docker-ce docker-ce-cli containerd.io\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("如果启用了多个Docker存储库,则在未在apt-get installor apt-get update命令中指定版本的情况下进行安装或更新将始终安装可能的最高版本,这可能不适合您的稳定性需求。")])])]),a._v(" "),t("li",[t("p",[a._v("要安装特定版本的Docker Engine-Community,请在存储库中列出可用版本,然后选择并安装:")]),a._v(" "),t("p",[a._v("a. 列出您的仓库中可用的版本:")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-cache")]),a._v(" madison docker-ce\n\n  docker-ce "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(":18.09.1~3-0~ubuntu-xenial "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages\n  docker-ce "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(":18.09.0~3-0~ubuntu-xenial "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages\n  docker-ce "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("18.06")]),a._v(".1~ce~3-0~ubuntu       "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages\n  docker-ce "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("18.06")]),a._v(".0~ce~3-0~ubuntu       "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n")])])]),t("p",[a._v("b. 使用第二列中的版本字符串安装特定版本,例如5:18.09.1~3-0~ubuntu-xenial。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" docker-ce"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("VERSION_STRING"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" docker-ce-cli"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("VERSION_STRING"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" containerd.io\n")])])])]),a._v(" "),t("li",[t("p",[a._v("通过运行hello-world 映像来验证是否正确安装了Docker Engine-Community 。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker run hello-world\n")])])]),t("p",[a._v("此命令下载测试图像并在容器中运行。容器运行时,它会打印参考消息并退出。")])])]),a._v(" "),t("h4",{attrs:{id:"从软件包安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从软件包安装"}},[a._v("#")]),a._v(" 从软件包安装")]),a._v(" "),t("p",[a._v("如果您不能使用Docker的存储库来安装Docker Engine-Community,则可以下载.deb要发布的 文件并手动安装。每次升级Docker时,都需要下载一个新文件。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("去"),t("a",{attrs:{href:"https://download.docker.com/linux/ubuntu/dists/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://download.docker.com/linux/ubuntu/dists/"),t("OutboundLink")],1),a._v("选择你的Ubuntu版本,浏览pool/stable/,选择amd64,armhf,arm64,ppc64el,或s390x,并下载.deb文件对于docker引擎。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("要安装夜间 软件包,stable请将URL中的单词更改 为nightly。 了解每晚和测试频道。")])])]),a._v(" "),t("li",[t("p",[a._v("安装Docker Engine-Community,将下面的路径更改为您下载Docker软件包的路径。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" dpkg -i /path/to/package.deb\n")])])]),t("p",[a._v("Docker守护程序会自动启动。")])]),a._v(" "),t("li",[t("p",[a._v("通过运行hello-world 映像来验证是否正确安装了Docker Engine-Community 。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker run hello-world\n")])])]),t("p",[a._v("此命令下载测试图像并在容器中运行。容器运行时,它会打印参考消息并退出。")])])]),a._v(" "),t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),t("h3",{attrs:{id:"镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[a._v("#")]),a._v(" 镜像")]),a._v(" "),t("h4",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),t("p",[a._v("在 Docker 的术语里，一个只读层被称为镜像，一个镜像是永久不会变的。")]),a._v(" "),t("p",[a._v("由于 Docker 使用一个统一文件系统，Docker 进程认为整个文件系统是以读写方式挂载的。 但是所有的变更都发生顶层的可写层，而下层的原始的只读镜像文件并未变化。由于镜像不 可写，所以镜像是无状态的。")]),a._v(" "),t("h5",{attrs:{id:"父镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#父镜像"}},[a._v("#")]),a._v(" 父镜像")]),a._v(" "),t("p",[a._v("每一个镜像都可能依赖于由一个或多个下层的组成的另一个镜像。我们有时说，下层那个 镜像是上层镜像的父镜像。")]),a._v(" "),t("h5",{attrs:{id:"基础镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础镜像"}},[a._v("#")]),a._v(" 基础镜像")]),a._v(" "),t("p",[a._v("一个没有任何父镜像的镜像，谓之基础镜像。")]),a._v(" "),t("h5",{attrs:{id:"镜像id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像id"}},[a._v("#")]),a._v(" 镜像ID")]),a._v(" "),t("p",[a._v("所有镜像都是通过一个 64 位十六进制字符串 （内部是一个 256 bit 的值）来标识的。 为简化使用，前 12 个字符可以组成一个短ID，可以在命令行中使用。短ID还是有一定的 碰撞机率，所以服务器总是返回长ID。")]),a._v(" "),t("h4",{attrs:{id:"获取镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取镜像"}},[a._v("#")]),a._v(" 获取镜像")]),a._v(" "),t("p",[a._v("可以使用 docker pull 命令来从仓库获取所需要的镜像。")]),a._v(" "),t("p",[a._v("下面的例子将从 Docker Hub 仓库下载一个 Ubuntu 12.04 操作系统的镜像。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker pull ubuntu:12.04\nPulling repository ubuntu\nab8e2728644c: Pulling dependent layers\n511136ea3c5a: Download complete\n5f0ffaa9455e: Download complete\na300658979be: Download complete\n904483ae0c30: Download complete\nffdaafd1ca50: Download complete\nd047ae21eeaf: Download complete\n")])])]),t("p",[a._v("下载过程中，会输出获取镜像的每一层信息。")]),a._v(" "),t("p",[a._v("该命令实际上相当于"),t("code",[a._v("$ sudo docker pull registry.hub.docker.com/ubuntu:12.04")]),a._v("命令，即从注册服务器registry.hub.docker.com 中的 ubuntu 仓库来下载标记为 12.04 的镜像。")]),a._v(" "),t("p",[a._v("有时候官方仓库注册服务器下载较慢，可以从其他仓库下载。 从其它仓库下载时需要指定完整的仓库注册服务器地址。例如")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker pull dl.dockerpool.com:5000/ubuntu:12.04\nPulling dl.dockerpool.com:5000/ubuntu\nab8e2728644c: Pulling dependent layers\n511136ea3c5a: Download complete\n5f0ffaa9455e: Download complete\na300658979be: Download complete\n904483ae0c30: Download complete\nffdaafd1ca50: Download complete\nd047ae21eeaf: Download complete\n")])])]),t("p",[a._v("完成后，即可随时使用该镜像了，例如创建一个容器，让其中运行 bash 应用。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker run -t -i ubuntu:12.04 /bin/bash\nroot@fe7fc4bd8fc9:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),t("h4",{attrs:{id:"列出本地镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列出本地镜像"}},[a._v("#")]),a._v(" 列出本地镜像")]),a._v(" "),t("p",[a._v("使用 docker images 显示本地已有的镜像。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker images\nREPOSITORY       TAG      IMAGE ID      CREATED      VIRTUAL SIZE\nubuntu           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("12.04")]),a._v("    74fe38d11401  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" weeks ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("209.6")]),a._v(" MB\nubuntu           precise  74fe38d11401  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" weeks ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("209.6")]),a._v(" MB\nubuntu           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("14.04")]),a._v("    99ec81b80c55  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" weeks ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("266")]),a._v(" MB\nubuntu           latest   99ec81b80c55  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" weeks ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("266")]),a._v(" MB\nubuntu           trusty   99ec81b80c55  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" weeks ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("266")]),a._v(" MB\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n")])])]),t("p",[a._v("在列出信息中，可以看到几个字段信息")]),a._v(" "),t("ul",[t("li",[a._v("来自于哪个仓库，比如 ubuntu")]),a._v(" "),t("li",[a._v("镜像的标记，比如 14.04")]),a._v(" "),t("li",[a._v("它的 ID 号（唯一）")]),a._v(" "),t("li",[a._v("创建时间")]),a._v(" "),t("li",[a._v("镜像大小")])]),a._v(" "),t("p",[a._v("其中镜像的 ID 唯一标识了镜像，注意到 ubuntu:14.04 和 ubuntu:trusty 具有相同的镜像 ID，说明它们实际上是同一镜像。")]),a._v(" "),t("p",[a._v("TAG 信息用来标记来自同一个仓库的不同镜像。例如 ubuntu 仓库中有多个镜像，通过 TAG 信息来区分发行版本，例如 10.04、12.04、12.10、13.04、14.04 等。例如下面的命令指定使用镜像 ubuntu:14.04 来启动一个容器。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker run -t -i ubuntu:14.04 /bin/bash\n")])])]),t("p",[a._v("如果不指定具体的标记，则默认使用 latest 标记信息。")]),a._v(" "),t("h4",{attrs:{id:"创建镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建镜像"}},[a._v("#")]),a._v(" 创建镜像")]),a._v(" "),t("p",[a._v("创建镜像有很多方法，用户可以从 Docker Hub 获取已有镜像并更新，也可以利用本地文件系统创建一个。")]),a._v(" "),t("h5",{attrs:{id:"修改已有镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改已有镜像"}},[a._v("#")]),a._v(" 修改已有镜像")]),a._v(" "),t("p",[a._v("先使用下载的镜像启动容器。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker run -t -i training/sinatra /bin/bash\nroot@0b2616b0e5a8:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("记住容器的 ID，稍后还会用到。")])]),a._v(" "),t("p",[a._v("在容器中添加 json 和 gem 两个应用。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("root@0b2616b0e5a8:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# gem install json")]),a._v("\n")])])]),t("p",[a._v("当结束后，我们使用 exit 来退出，现在我们的容器已经被我们改变了，使用 docker commit 命令来提交更新后的副本。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Added json gem"')]),a._v(" -a "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Docker Newbee"')]),a._v(" 0b2616b0e5a8 ouruser/sinatra:v2\n4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c\n")])])]),t("p",[a._v("其中，-m 来指定提交的说明信息，跟我们使用的版本控制工具一样；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。")]),a._v(" "),t("p",[a._v("使用 docker images 来查看新创建的镜像。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker images\nREPOSITORY          TAG     IMAGE ID       CREATED       VIRTUAL SIZE\ntraining/sinatra    latest  5bc342fa0b91   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" hours ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("446.7")]),a._v(" MB\nouruser/sinatra     v2      3c59e02ddd1a   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" hours ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("446.7")]),a._v(" MB\nouruser/sinatra     latest  5db5f8471261   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" hours ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("446.7")]),a._v(" MB\n")])])]),t("p",[a._v("之后，可以使用新的镜像来启动容器")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker run -t -i ouruser/sinatra:v2 /bin/bash\nroot@78e82f680994:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),t("h5",{attrs:{id:"利用-dockerfile-来创建镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用-dockerfile-来创建镜像"}},[a._v("#")]),a._v(" 利用 Dockerfile 来创建镜像")]),a._v(" "),t("p",[a._v("使用 docker commit 来扩展一个镜像比较简单，但是不方便在一个团队中分享。我们可以使用 docker build来创建一个新的镜像。为此，首先需要创建一个 Dockerfile，包含一些如何创建镜像的指令。")]),a._v(" "),t("p",[a._v("新建一个目录和一个 Dockerfile")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" sinatra\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" sinatra\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("touch")]),a._v(" Dockerfile\n")])])]),t("p",[a._v("Dockerfile 中每一条指令都创建镜像的一层，例如：")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# This is a comment")]),a._v("\nFROM ubuntu:14.04\nMAINTAINER Docker Newbee "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("newbee@docker.com"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" -qq update\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" -qqy "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" ruby ruby-dev\nRUN gem "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" sinatra\n")])])]),t("p",[a._v("Dockerfile 基本的语法是")]),a._v(" "),t("ul",[t("li",[a._v("使用#来注释")]),a._v(" "),t("li",[a._v("FROM 指令告诉 Docker 使用哪个镜像作为基础")]),a._v(" "),t("li",[a._v("接着是维护者的信息")]),a._v(" "),t("li",[a._v("RUN开头的指令会在创建中运行，比如安装一个软件包，在这里使用 apt-get 来安装了一些软件")])]),a._v(" "),t("p",[a._v("编写完成 Dockerfile 后可以使用 docker build 来生成镜像。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker build -t"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ouruser/sinatra:v2"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\nUploading context  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.56")]),a._v(" kB\nUploading context\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" FROM ubuntu:14.04\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 99ec81b80c55\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" MAINTAINER Newbee "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("newbee@docker.com"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" 7c5664a8a0c1\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 2fa8ca4e2a13\nRemoving intermediate container 7c5664a8a0c1\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" RUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" -qq update\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" b07cc3fb4256\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 50d21070ec0c\nRemoving intermediate container b07cc3fb4256\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" RUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" -qqy "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" ruby ruby-dev\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" a5b038dd127e\nSelecting previously unselected package libasan0:amd64.\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Reading database "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11518")]),a._v(" files and directories currently installed."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nPreparing to unpack "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("./libasan0_4.8.2-19ubuntu1_amd64.deb "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\nSetting up ruby "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(":1.9.3.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\nSetting up ruby1.9.1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.9")]),a._v(".3.484-2ubuntu1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\nProcessing triggers "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" libc-bin "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.19")]),a._v("-0ubuntu6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 2acb20f17878\nRemoving intermediate container a5b038dd127e\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" RUN gem "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" sinatra\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" 5e9d0065c1f7\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\nSuccessfully installed rack-protection-1.5.3\nSuccessfully installed sinatra-1.4.5\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" gems installed\n---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 324104cde6ad\nRemoving intermediate container 5e9d0065c1f7\nSuccessfully built 324104cde6ad\n")])])]),t("p",[a._v("其中 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。")]),a._v(" "),t("p",[a._v("可以看到 build 进程在执行操作。它要做的第一件事情就是上传这个 Dockerfile 内容，因为所有的操作都要依据 Dockerfile 来进行。 然后，Dockfile 中的指令被一条一条的执行。每一步都创建了一个新的容器，在容器中执行指令并提交修改（就跟之前介绍过的 docker commit 一样）。当所有的指令都执行完毕之后，返回了最终的镜像 id。所有的中间步骤所产生的容器都被删除和清理了。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("一个镜像不能超过 127 层")])]),a._v(" "),t("p",[a._v("此外，还可以利用 ADD 命令复制本地文件到镜像；用 EXPOSE 命令来向外部开放端口；用 CMD 命令来描述容器启动后运行的程序等。例如")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# put my local web site in myApp folder to /var/www")]),a._v("\nADD myApp /var/www\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# expose httpd port")]),a._v("\nEXPOSE "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# the command to run")]),a._v("\nCMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/usr/sbin/apachectl"')]),a._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-D"')]),a._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"FOREGROUND"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("p",[a._v("现在可以利用新创建的镜像来启动一个容器。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker run -t -i ouruser/sinatra:v2 /bin/bash\nroot@8196968dac35:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),t("p",[a._v("还可以用 docker tag 命令来修改镜像的标签。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker tag 5db5f8471261 ouruser/sinatra:devel\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker images ouruser/sinatra\nREPOSITORY          TAG     IMAGE ID      CREATED        VIRTUAL SIZE\nouruser/sinatra     latest  5db5f8471261  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v(" hours ago   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("446.7")]),a._v(" MB\nouruser/sinatra     devel   5db5f8471261  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v(" hours ago   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("446.7")]),a._v(" MB\nouruser/sinatra     v2      5db5f8471261  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v(" hours ago   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("446.7")]),a._v(" MB\n")])])]),t("h5",{attrs:{id:"从本地文件系统导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从本地文件系统导入"}},[a._v("#")]),a._v(" 从本地文件系统导入")]),a._v(" "),t("p",[a._v("要从本地文件系统导入一个镜像，可以使用 openvz（容器虚拟化的先锋技术）的模板来创建： openvz 的模板下载地址为 templates 。")]),a._v(" "),t("p",[a._v("比如，先下载了一个 ubuntu-14.04 的镜像，之后使用以下命令导入：")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" ubuntu-14.04-x86_64-minimal.tar.gz  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v(" - ubuntu:14.04\n")])])]),t("p",[a._v("然后查看新导入的镜像。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu              "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("14.04")]),a._v("               05ac7c0b9383        "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),a._v(" seconds ago      "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("215.5")]),a._v(" MB\n")])])]),t("h5",{attrs:{id:"上传镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上传镜像"}},[a._v("#")]),a._v(" 上传镜像")]),a._v(" "),t("p",[a._v("用户可以通过 docker push 命令，把自己创建的镜像上传到仓库中来共享。例如，用户在 Docker Hub 上完成注册后，可以推送自己的镜像到仓库中。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker push ouruser/sinatra\nThe push refers to a repository "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ouruser/sinatra"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("len: "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nSending image list\nPushing repository ouruser/sinatra "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" tags"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("h4",{attrs:{id:"存出和载入镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存出和载入镜像"}},[a._v("#")]),a._v(" 存出和载入镜像")]),a._v(" "),t("h5",{attrs:{id:"存出镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存出镜像"}},[a._v("#")]),a._v(" 存出镜像")]),a._v(" "),t("p",[a._v("如果要导出镜像到本地文件，可以使用 docker save 命令。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu              "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("14.04")]),a._v("               c4ff7513909d        "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" weeks ago         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("225.4")]),a._v(" MB\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$sudo")]),a._v(" docker save -o ubuntu_14.04.tar ubuntu:14.04\n")])])]),t("h5",{attrs:{id:"载入镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#载入镜像"}},[a._v("#")]),a._v(" 载入镜像")]),a._v(" "),t("p",[a._v("可以使用 docker load 从导出的本地文件中再导入到本地镜像库，例如")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker load --input ubuntu_14.04.tar\n或\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker load "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" ubuntu_14.04.tar\n")])])]),t("p",[a._v("这将导入镜像以及其相关的元数据信息（包括标签等）。")]),a._v(" "),t("h4",{attrs:{id:"移除本地镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#移除本地镜像"}},[a._v("#")]),a._v(" 移除本地镜像")]),a._v(" "),t("p",[a._v("如果要移除本地的镜像，可以使用 docker rmi 命令。注意 docker rm 命令是移除容器。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker rmi training/sinatra\nUntagged: training/sinatra:latest\nDeleted: 5bc342fa0b91cabf65246837015197eecfa24b2213ed6a51a8974ae250fedd8d\nDeleted: ed0fffdcdae5eb2c3a55549857a8be7fc8bc4241fb19ad714364cbfd7a56b22f\nDeleted: 5c58979d73ae448df5af1d8142436d81116187a7633082650549c52c3a2418f0\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器。")])]),a._v(" "),t("h4",{attrs:{id:"镜像的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像的实现原理"}},[a._v("#")]),a._v(" 镜像的实现原理")]),a._v(" "),t("p",[a._v("Docker 镜像是怎么实现增量的修改和维护的？ 每个镜像都由很多层次构成，Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。")]),a._v(" "),t("p",[a._v("通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。 Docker 在 AUFS 上构建的容器也是利用了类似的原理。")]),a._v(" "),t("h3",{attrs:{id:"容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[a._v("#")]),a._v(" 容器")]),a._v(" "),t("h4",{attrs:{id:"基本结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本结构"}},[a._v("#")]),a._v(" 基本结构")]),a._v(" "),t("p",[a._v("Dockerfile 由一行行命令语句组成，并且支持以 # 开头的注释行。")]),a._v(" "),t("p",[a._v("一般的，Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。")]),a._v(" "),t("p",[a._v("例如")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# This dockerfile uses the ubuntu image")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# VERSION 2 - EDITION 1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Author: docker_user")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Command format: Instruction [arguments / command] ..")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Base image to use, this must be set as the first line")]),a._v("\nFROM ubuntu\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Maintainer: docker_user <docker_user at email.com> (@docker_user)")]),a._v("\nMAINTAINER docker_user docker_user@email.com\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Commands to update the image")]),a._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"deb http://archive.ubuntu.com/ubuntu/ raring main universe"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" /etc/apt/sources.list\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" update "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" -y nginx\nRUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[a._v("\\n")]),a._v('daemon off;"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" /etc/nginx/nginx.conf\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Commands when creating a new container")]),a._v("\nCMD /usr/sbin/nginx\n")])])]),t("p",[a._v("其中，一开始必须指明所基于的镜像名称，接下来推荐说明维护者信息。")]),a._v(" "),t("p",[a._v("后面则是镜像操作指令，例如 RUN 指令，RUN 指令将对镜像执行跟随的命令。每运行一条 RUN 指令，镜像添加新的一层，并提交。")]),a._v(" "),t("p",[a._v("最后是 CMD 指令，来指定运行容器时的操作命令。")]),a._v(" "),t("p",[a._v("下面是一个更复杂的例子")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Nginx")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# VERSION               0.0.1")]),a._v("\n\nFROM      ubuntu\nMAINTAINER Victor Vieux "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("victor@docker.com"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" update "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" -y inotify-tools nginx apache2 openssh-server\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Firefox over VNC")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# VERSION               0.3")]),a._v("\n\nFROM ubuntu\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Install vnc, xvfb in order to create a 'fake' display and firefox")]),a._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" update "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" -y x11vnc xvfb firefox\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" /.vnc\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Setup a password")]),a._v("\nRUN x11vnc -storepasswd "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1234")]),a._v(" ~/.vnc/passwd\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Autostart firefox (might not be the best way, but it does the trick)")]),a._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v(" -c "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'echo \"firefox\" >> /.bashrc'")]),a._v("\n\nEXPOSE "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5900")]),a._v("\nCMD    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"x11vnc"')]),a._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-forever"')]),a._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-usepw"')]),a._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-create"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Multiple images example")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# VERSION               0.1")]),a._v("\n\nFROM ubuntu\nRUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" bar\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Will output something like ===> 907ad6c2736f")]),a._v("\n\nFROM ubuntu\nRUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" moo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" oink\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Will output something like ===> 695d7793cbe4")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# You᾿ll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# /oink.")]),a._v("\n")])])]),t("h4",{attrs:{id:"指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[a._v("#")]),a._v(" 指令")]),a._v(" "),t("p",[a._v("指令的一般格式为 INSTRUCTION arguments，指令包括 FROM、MAINTAINER、RUN 等。")]),a._v(" "),t("h5",{attrs:{id:"from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[a._v("#")]),a._v(" FROM")]),a._v(" "),t("p",[a._v("格式为 FROM <image>或FROM <image>:<tag>。")]),a._v(" "),t("p",[a._v("第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令（每个镜像一次）。")]),a._v(" "),t("h5",{attrs:{id:"maintainer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maintainer"}},[a._v("#")]),a._v(" MAINTAINER")]),a._v(" "),t("p",[a._v("格式为 MAINTAINER <name>，指定维护者信息。")]),a._v(" "),t("h5",{attrs:{id:"run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[a._v("#")]),a._v(" RUN")]),a._v(" "),t("p",[a._v('格式为 RUN <command> 或 RUN ["executable", "param1", "param2"]。')]),a._v(" "),t("p",[a._v('前者将在 shell 终端中运行命令，即 /bin/sh -c；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如 RUN ["/bin/bash", "-c", "echo hello"]。')]),a._v(" "),t("p",[a._v("每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \\ 来换行。")]),a._v(" "),t("h5",{attrs:{id:"cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[a._v("#")]),a._v(" CMD")]),a._v(" "),t("p",[a._v("支持三种格式")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('CMD ["executable","param1","param2"] 使用 exec 执行，推荐方式；\nCMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；\nCMD ["param1","param2"] 提供给 ENTRYPOINT 的默认参数；\n')])])]),t("p",[a._v("指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。")]),a._v(" "),t("p",[a._v("如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。")]),a._v(" "),t("h5",{attrs:{id:"expose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[a._v("#")]),a._v(" EXPOSE")]),a._v(" "),t("p",[a._v("格式为 EXPOSE <port> [<port>...]。")]),a._v(" "),t("p",[a._v("告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。")]),a._v(" "),t("h5",{attrs:{id:"env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[a._v("#")]),a._v(" ENV")]),a._v(" "),t("p",[a._v("格式为 ENV <key> <value>。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。")]),a._v(" "),t("p",[a._v("例如")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("ENV PG_MAJOR "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9.3")]),a._v("\nENV PG_VERSION "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9.3")]),a._v(".4\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" -SL http://example.com/postgres-"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$PG_VERSION")]),a._v(".tar.xz "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -xJC /usr/src/postgress "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" …\nENV "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")]),a._v(" /usr/local/postgres-"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$PG_MAJOR")]),a._v("/bin:"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),a._v("\n")])])]),t("h5",{attrs:{id:"add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[a._v("#")]),a._v(" ADD")]),a._v(" "),t("p",[a._v("格式为 ADD <src> <dest>。")]),a._v(" "),t("p",[a._v("该命令将复制指定的 <src> 到容器中的 <dest>。 其中 <src> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。")]),a._v(" "),t("h5",{attrs:{id:"copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[a._v("#")]),a._v(" COPY")]),a._v(" "),t("p",[a._v("格式为 COPY <src> <dest>。")]),a._v(" "),t("p",[a._v("复制本地主机的 <src>（为 Dockerfile 所在目录的相对路径）到容器中的 <dest>。")]),a._v(" "),t("p",[a._v("当使用本地目录为源目录时，推荐使用 COPY。\nENTRYPOINT")]),a._v(" "),t("p",[a._v("两种格式：")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('ENTRYPOINT ["executable", "param1", "param2"]\nENTRYPOINT command param1 param2（shell中执行）。\n')])])]),t("p",[a._v("配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。")]),a._v(" "),t("p",[a._v("每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。")]),a._v(" "),t("h5",{attrs:{id:"volume"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[a._v("#")]),a._v(" VOLUME")]),a._v(" "),t("p",[a._v('格式为 VOLUME ["/data"]。')]),a._v(" "),t("p",[a._v("创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。")]),a._v(" "),t("h5",{attrs:{id:"user"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#user"}},[a._v("#")]),a._v(" USER")]),a._v(" "),t("p",[a._v("格式为 USER daemon。")]),a._v(" "),t("p",[a._v("指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。")]),a._v(" "),t("p",[a._v("当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：RUN groupadd -r postgres && useradd -r -g postgres postgres。要临时获取管理员权限可以使用 gosu，而不推荐 sudo。")]),a._v(" "),t("h5",{attrs:{id:"workdir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[a._v("#")]),a._v(" WORKDIR")]),a._v(" "),t("p",[a._v("格式为 WORKDIR /path/to/workdir。")]),a._v(" "),t("p",[a._v("为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。")]),a._v(" "),t("p",[a._v("可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如")]),a._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[a._v("WORKDIR /a\nWORKDIR b\nWORKDIR c\nRUN pwd\n")])])]),t("p",[a._v("则最终路径为 /a/b/c。")]),a._v(" "),t("h5",{attrs:{id:"onbuild"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onbuild"}},[a._v("#")]),a._v(" ONBUILD")]),a._v(" "),t("p",[a._v("格式为 ONBUILD [INSTRUCTION]。")]),a._v(" "),t("p",[a._v("配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。")]),a._v(" "),t("p",[a._v("例如，Dockerfile 使用如下的内容创建了镜像 image-A。")]),a._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\nONBUILD ADD . /app/src\nONBUILD RUN /usr/local/bin/python"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("build "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("dir /app/src\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("p",[a._v("如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 FROM image-A指定基础镜像时，会自动执行ONBUILD 指令内容，等价于在后面添加了两条指令。")]),a._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[a._v("FROM image"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("A\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#Automatically run the following")]),a._v("\nADD . /app/src\nRUN /usr/local/bin/python"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("build "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("dir /app/src\n")])])]),t("p",[a._v("使用 ONBUILD 指令的镜像，推荐在标签中注明，例如 ruby:1.9-onbuild。")]),a._v(" "),t("h4",{attrs:{id:"构建镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[a._v("#")]),a._v(" 构建镜像")]),a._v(" "),t("p",[a._v("编写完成 Dockerfile 之后，可以通过 docker build 命令来构建镜像。")]),a._v(" "),t("p",[a._v("基本的格式为 docker build [选项] 路径，该命令将读取指定路径下（包括子目录）的 Dockerfile，并将该路径下所有内容发送给 Docker 服务端，由服务端来构建镜像。因此一般建议放置 Dockerfile 的目录为空目录。也可以通过 .dockerignore 文件（每一行添加一条匹配模式）来让 Docker 忽略路径下的目录和文件。")]),a._v(" "),t("p",[a._v("要指定镜像的标签信息，可以通过 -t 选项，例如")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" docker build -t myrepo/myapp /tmp/test1/\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);